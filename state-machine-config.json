{
    "Comment": "Process Athena queries in parallel with CSV formatting and monitoring",
    "StartAt": "PrepareQueries",
    "States": {
      "PrepareQueries": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:us-east-2:127178877223:function:PrepareQueries",
          "Payload": {
            "output_bucket.$": "$.output_bucket",
            "output_prefix.$": "$.output_prefix",
            "database.$": "$.database",
            "queries.$": "$.queries"
          }
        },
        "ResultPath": "$.query_details",
        "Next": "ExecuteQueriesInParallel"
      },
      "ExecuteQueriesInParallel": {
        "Type": "Map",
        "InputPath": "$.query_details.Payload",
        "ItemsPath": "$.query_params",
        "MaxConcurrency": 10,
        "Parameters": {
          "query.$": "$$.Map.Item.Value.query",
          "query_id.$": "$$.Map.Item.Value.query_id",
          "database.$": "$$.Map.Item.Value.database",
          "output_bucket.$": "$$.Map.Item.Value.output_bucket",
          "output_location.$": "$$.Map.Item.Value.output_location"
        },
        "Iterator": {
          "StartAt": "ExecuteSingleQuery",
          "States": {
            "ExecuteSingleQuery": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-2:127178877223:function:ExecuteSingleQuery",
                "Payload.$": "$"
              },
              "End": true
            }
          }
        },
        "ResultPath": "$.query_results",
        "Next": "MonitorQueries"
      },
      "MonitorQueries": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:us-east-2:127178877223:function:ResultsGatherer",
          "Payload": {
            "query_results.$": "$.query_results[*].Payload",
            "timestamp.$": "$.query_details.Payload.timestamp",
            "output_bucket.$": "$.output_bucket",
            "output_prefix.$": "$.output_prefix",
            "zip_prefix.$": "$.zip_prefix"
          }
        },
        "ResultPath": "$.monitoring_result",
        "Next": "CheckQueryStatus"
      },
      "CheckQueryStatus": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.monitoring_result.Payload.status",
            "StringEquals": "RUNNING",
            "Next": "WaitBeforeNextCheck"
          },
          {
            "Variable": "$.monitoring_result.Payload.status",
            "StringEquals": "FAILED",
            "Next": "QueryFailed"
          }
        ],
        "Default": "CreateZipFile"
      },
      "WaitBeforeNextCheck": {
        "Type": "Wait",
        "Seconds": 30,
        "Next": "MonitorQueries"
      },
      "QueryFailed": {
        "Type": "Fail",
        "Cause": "At least one Athena query failed",
        "Error": "AthenaQueryFailure"
      },
      "CreateZipFile": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:us-east-2:127178877223:function:zip-s3-folder",
          "Payload": {
            "raw_result_files.$": "$.monitoring_result.Payload.raw_result_files",
            "formatted_csv_locations.$": "$.monitoring_result.Payload.formatted_csv_locations",
            "timestamp.$": "$.query_details.Payload.timestamp",
            "output_bucket.$": "$.output_bucket",
            "zip_prefix.$": "$.zip_prefix"
          }
        },
        "ResultPath": "$.zip_result",
        "Next": "CheckForTransport"
      },
      "CheckForTransport": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.transporter",
            "IsPresent": true,
            "Next": "TransportFile"
          }
        ],
        "Default": "ExecutionComplete"
      },
      "TransportFile": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:us-east-2:127178877223:function:file-transporter-lambda",
          "Payload": {
            "source_bucket.$": "$.output_bucket",
            "source_key.$": "$.zip_result.Payload.output_key",
            "file_name.$": "$.zip_result.Payload.output_key",
            "transporter.$": "$.transporter"
          }
        },
        "ResultPath": "$.transport_result",
        "Next": "ExecutionComplete"
      },
      "ExecutionComplete": {
        "Type": "Pass",
        "End": true
      }
    }
  }